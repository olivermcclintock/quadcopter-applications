       **Arguments: minValue -- the least legal value for the Random number.
       // Constructors
     [Serializable] 
         Contract.EndContractBlock(); 
       public virtual int Next(int maxValue) { 
       **Returns: An int [0..maxValue)
       // Private Constants 
           Contract.EndContractBlock(); 
         for (int k=1; k<5; k++) { 
           // If we use Sample for a range [Int32.MinValue..Int32.MaxValue)
           // The distribution of double value returned by Sample 
         inext=0; 
       **Arguments: None
       **           maxValue -- One greater than the greatest legal return value. 
           double d = result;
           mk = mj - mk;
               return (int)((long)(GetSampleForLargeRange() * range) + minValue);
       // 
               return ((int)(Sample() * range) + minValue);
     using System.Runtime;
           } 
       **Exceptions: None. 
         if (buffer==null) throw new ArgumentNullException("buffer");
       /*=====================================Next=====================================
           d /= 2*(uint)Int32.MaxValue - 1  ;
               result = -result; 
       } 
       **Exceptions: None
       **Arugments:  buffer -- the array to be filled. 
           SeedArray[locINext]=retVal; 
       /*=====================================Next===================================== 
       public virtual int Next() {
       ==============================================================================*/
       //
       //
           return d;
         Contract.EndContractBlock(); 
           //random number distribution.
           // The distribution of double value returned by Sample 
       public Random(int Seed) {
         int mj, mk;
       **Returns: A double [0..1)
       public virtual double NextDouble() {
       **Arguments: None 
       **Returns: A double [0..1) 
       private int inextp; 
           //Including this division at the end gives us significantly improved 
       /*=====================================Next===================================== 
         }
       public virtual int Next(int maxValue) { 
         mj = MSEED - subtraction;
       **Returns: An int [0..maxValue)
       [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
         return InternalSample();
#if !FEATURE_CORECLR
       private const int MSEED = 161803398;
       **Returns: An int [0..Int32.MaxValue)
namespace System {
         }
           if (minValue>maxValue) { 
           ii = (21*i)%55;
       **Arguments: minValue -- the least legal value for the Random number.
               return (int)((long)(GetSampleForLargeRange() * range) + minValue);
           return (int)(Sample()*maxValue);
       [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")] 
           // Note we can't use addition here. The distribution will be bad if we do that.
           if (++locINextp>= 56) locINextp = 1; 
       // Member Variables 
[System.Runtime.InteropServices.ComVisible(true)]
         Seed = 1;
       //
               throw new ArgumentOutOfRangeException("minValue",Environment.GetResourceString("Argument_MinMaxValue", "minValue", "maxValue"));
       }
           inextp = locINextp;
       **Exceptions: None 
       /*==================================NextBytes===================================
#if !FEATURE_CORECLR
           if (retVal == MBIG) retVal--; 
       **Returns: An int [0..Int32.MaxValue)
       **Action:  Fills the byte array with random bytes [0..0x7f].  The entire array is filled.
       private double GetSampleForLargeRange() {
           return retVal;
       [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
     using System; 
       **Arguments: None 
       **Returns:Void
       **Action: Return a new random number [0..1) and reSeed the Seed array. 
       [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
       ==============================================================================*/
           SeedArray[locINext]=retVal; 
       }
           } 
         return InternalSample();
       public virtual void NextBytes(byte [] buffer){ 
           long range = (long)maxValue-minValue; 
     using System.Diagnostics.Contracts;
       **Returns: An int [minvalue..maxvalue) 
       /*=====================================Next=====================================
       // 
         //Initialize our Seed array.
       ==============================================================================*/
           retVal = SeedArray[locINext]-SeedArray[locINextp];
                             SyntaxHighlighter.all()
           if (maxValue<0) { 
           long range = (long)maxValue-minValue; 
         for (int i=1; i<55; i++) {  //Apparently the range [1..55] is special (Knuth) and so we're wasting the 0'th position.
           if( range <= (long)Int32.MaxValue) {
       **Exceptions: None
       **Arguments: maxValue -- One more than the greatest legal return value.
       // Public Constants 
       // 
       // 
           Contract.EndContractBlock(); 
       // Public Instance Methods 
       }
           int result = InternalSample();
       **Exceptions: None. 
       public virtual int Next(int minValue, int maxValue) {
       protected virtual double Sample() { 
           if (++locINext >=56) locINext=1;
       **           maxValue -- One greater than the greatest legal return value. 
               return ((int)(Sample() * range) + minValue);
       /*=====================================Next=====================================
               throw new ArgumentOutOfRangeException("maxValue", Environment.GetResourceString("ArgumentOutOfRange_MustBePositive", "maxValue"));
           // is not distributed well enough for a large range. 
           return (InternalSample()*(1.0/MBIG)); 
         SeedArray[i] -= SeedArray[1+(i+30)%55];
           if (minValue>maxValue) { 
           }
           } 
         if (buffer==null) throw new ArgumentNullException("buffer");
     public class Random {
           } 
           } 
           if (++locINextp>= 56) locINextp = 1; 
                         <p></p>
           } 
       } 
       [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
       **Returns: An int [minvalue..maxvalue) 
       /*=====================================Next===================================== 
         : this(Environment.TickCount) { 
     using System.Globalization;
           // is not distributed well enough for a large range. 
#endif 
           if (retVal == MBIG) retVal--; 
       private int[] SeedArray = new int[56];
       **Exceptions: None.
           // We will end up getting even numbers only. 
       private double GetSampleForLargeRange() {
       **Exceptions: None.
       **Arguments: None
           if (maxValue<0) { 
                         <script type="text/javascript">
       **Arguments: maxValue -- One more than the greatest legal return value.
           retVal = SeedArray[locINext]-SeedArray[locINextp];
       **Arugments:  buffer -- the array to be filled. 
       **Exceptions: None.
       }
       ==============================================================================*/
           } 
         //This algorithm comes from Numerical Recipes in C (2nd Ed.) 
       ==============================================================================*/
               throw new ArgumentOutOfRangeException("minValue",Environment.GetResourceString("Argument_MinMaxValue", "minValue", "maxValue"));
           int locINext = inext;
       //
#endif 
       } 
           int result = InternalSample();
       ==============================================================================*/
       /*==================================NextBytes===================================
           d /= 2*(uint)Int32.MaxValue - 1  ;
           bool negative = (InternalSample()%2 == 0) ? true : false;  // decide the sign based on second sample 
         int ii;
#if !FEATURE_CORECLR
         SeedArray[55]=mj; 
           inextp = locINextp;
           Contract.EndContractBlock();
       private const int MZ = 0;
                         </script>
       **Returns: A double [0..1) 
           if( negative) {
       **Exceptions: None.
       }
       public virtual int Next() {
#endif
           // We will end up getting even numbers only. 
       public virtual double NextDouble() {
           else { 
       //
       } 
           return retVal;
       /*=====================================Next===================================== 
       } 
           inext = locINext; 
       /*====================================Sample==================================== 
         return Sample(); 
               throw new ArgumentOutOfRangeException("maxValue", Environment.GetResourceString("ArgumentOutOfRange_MustBePositive", "maxValue"));
           int locINextp = inextp; 
       } 
       // Native Declarations
           if (retVal<0) retVal+=MBIG;
       **Arguments: None 
       private const int MBIG =  Int32.MaxValue; 
       ==============================================================================*/
           int retVal; 
           return d;
           if( range <= (long)Int32.MaxValue) {
       private int InternalSample() {
       public virtual int Next(int minValue, int maxValue) {
       // 
       **Exceptions: None
           inext = locINext; 
#endif 
       } 
           }
       // Public Instance Methods 
       // 
       private int inext;
       }
       }
       ==============================================================================*/
#endif 
         return Sample(); 
           SeedArray[ii]=mk; 
       public Random() 
           else { 
           return (int)(Sample()*maxValue);
           if( negative) {
       // 
       //
           d += (Int32.MaxValue - 1); // get a number in range [0 .. 2 * Int32MaxValue - 1) 
#if !FEATURE_CORECLR 
           for (int i=1; i<56; i++) {
       //
       **Action:  Fills the byte array with random bytes [0..0x7f].  The entire array is filled.
         if (SeedArray[i]<0) SeedArray[i]+=MBIG;
       }
         for (int i=0; i<buffer.length; i++)="" {="" buffer[i]="(byte)(InternalSample()%(Byte.MaxValue+1));" }="" file="" provided="" for="" reference="" use="" only="" by="" microsoft="" corporation="" (c)="" 2007.="" =="++==" copyright="" corporation.="" all="" rights="" reserved.="" *="===========================================================" **="" class:="" random="" purpose:="" a="" number="" generator.="" namespace="" system="" using="" system;="" system.runtime;="" system.runtime.compilerservices;="" system.globalization;="" system.diagnostics.contracts;="" [system.runtime.interopservices.comvisible(true)]="" [serializable]="" public="" class="" private="" constants="" const="" int="" mbig="Int32.MaxValue;" mseed="161803398;" mz="0;" member="" variables="" inext;="" inextp;="" int[]="" seedarray="new" int[56];="" native="" declarations="" constructors="" random()="" :="" this(environment.tickcount)="" random(int="" seed)="" ii;="" mj,="" mk;="" initialize="" our="" seed="" array.="" this="" algorithm="" comes="" from="" numerical="" recipes="" in="" c="" (2nd="" ed.)="" subtraction="(Seed" ?="" int32.maxvalue="" math.abs(seed);="" mj="MSEED" -="" subtraction;="" seedarray[55]="mj;" mk="1;" (int="" i="1;" i<55;="" apparently="" the="" range="" [1..55]="" is="" special="" (knuth)="" and="" so="" we're="" wasting="" 0'th="" position.="" ii="(21*i)%55;" seedarray[ii]="mk;" if="" (mk<0)="" mk+="MBIG;" k="1;" k<5;="" k++)="" i<56;="" seedarray[i]="" (seedarray[i]<0)="" seedarray[i]+="MBIG;" inext="0;" inextp="21;" package="" methods="" **action:="" return="" new="" [0..1)="" reseed="" **returns:="" double="" **arguments:="" none="" **exceptions:="" #if="" !feature_coreclr="" [targetedpatchingoptout("performance="" critical="" to="" inline="" across="" ngen="" image="" boundaries")]="" #endif="" protected="" virtual="" sample()="" including="" division="" at="" end="" gives="" us="" significantly="" improved="" distribution.="" (internalsample()*(1.0="" mbig));="" internalsample()="" retval;="" locinext="inext;" locinextp="inextp;" (++locinext="">=56) locINext=1;
           mj=SeedArray[ii]; 
           } 
       //
#if !FEATURE_CORECLR 
           Contract.EndContractBlock();
         int subtraction = (Seed == Int32.MinValue) ? Int32.MaxValue : Math.Abs(Seed); 
       **Exceptions: None 
       // 
         for (int i=0; i<buffer.length; i++)="" {="" buffer[i]="(byte)(InternalSample()%(Byte.MaxValue+1));" }="" file="" provided="" for="" reference="" use="" only="" by="" microsoft="" corporation="" (c)="" 2007.="" <="" pre="">
       ==============================================================================*/
     using System.Runtime.CompilerServices; 
       // Package Private Methods
               result = -result; 
       ==============================================================================*/
           bool negative = (InternalSample()%2 == 0) ? true : false;  // decide the sign based on second sample 
           // If we use Sample for a range [Int32.MinValue..Int32.MaxValue)
           double d = result;
           d += (Int32.MaxValue - 1); // get a number in range [0 .. 2 * Int32MaxValue - 1) 
           if (retVal<0) retVal+=MBIG;
</buffer.length;></buffer.length;>
           } 
       **Returns:Void
           // Note we can't use addition here. The distribution will be bad if we do that.
         mk=1;
       ==============================================================================*/
       public virtual void NextBytes(byte [] buffer){ 
         inextp = 21; 
           if (mk<0) mk+=MBIG; 
       /*=====================================Next=====================================



















































